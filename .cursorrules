# Starside Armory Shopify Theme - Development Rules

## üö® CRITICAL SAFETY RULES

### CSS Editing Guidelines
- **NEVER use `edit_file` for large CSS sections** - always use `search_replace` for targeted changes
- **Make ONE change at a time** and test immediately
- **NEVER rewrite existing working code** unless absolutely necessary
- **Always preserve navigation functionality** - test dropdowns and mobile menu after CSS changes
- **Use git commits frequently** to create safe restore points before major changes

### Navigation Protection
- The header navigation uses complex dropdown styles (`.has-dropdown`, `.dropdown-menu`, etc.)
- Mobile navigation has specific responsive breakpoints and JavaScript dependencies
- **Test navigation immediately** after any CSS changes
- If navigation breaks, revert with `git checkout -- assets/style.css`

### Change Process
1. **Commit current working state** before making changes
2. **Make targeted change** using `search_replace`
3. **Test the specific functionality** affected
4. **Test navigation** (desktop dropdowns + mobile menu)
5. **Commit if working**, or revert if broken
6. **Move to next change** only after current one is verified

## üé® Theme Specifics

### Cyberpunk Aesthetic
- Colors: cyan (`--color-accent-cyan`), magenta (`--color-accent-magenta`), green (`--color-accent-green`), yellow (`--color-accent-yellow`)
- Fonts: Primary (`--font-family-primary`), Secondary (`--font-family-secondary`)
- Effects: Clip-paths, glows, terminal-style interfaces
- Text style: Uppercase, bracketed labels like `[ADD_TO_INVENTORY_CORE]`

### Responsive Breakpoints
- Mobile: 0-767px
- Tablet: 768-989px  
- Desktop Small: 990-1399px
- Desktop Large: 1400px+

### Key Files
- `assets/style.css` - Main stylesheet (HANDLE WITH EXTREME CARE)
- `assets/script.js` - Navigation JavaScript
- `sections/header.liquid` - Navigation HTML structure
- `sections/product.liquid` - Product page template

## üõ†Ô∏è Common Tasks

### Product Page Improvements
- Use `.product-interface-section` prefix for product-specific styles
- Maintain data-box styling consistency
- Ensure Buy Now button matches theme (`--color-accent-magenta`)

### Adding New Styles
- Follow existing CSS organization and naming conventions
- Use CSS variables for colors, spacing, and fonts
- Test on mobile and desktop
- Maintain cyberpunk aesthetic

## üè™ SHOPIFY BEST PRACTICES

### CSS Organization (CRITICAL)
- **NEVER add inline `<style>` tags** in section files
- **ALL CSS must go in `assets/style.css`** with organized comments
- **Dynamic CSS variables are OK**: `style="--color: {{ settings.color }}"`
- **Use CSS custom properties** for theme settings integration
- **Organize CSS by sections** with clear comment headers

### JavaScript Organization (CRITICAL)
- **NEVER add inline `<script>` tags** in section files (except JSON-LD)
- **ALL JavaScript must go in `assets/script.js`** 
- **Use data attributes** to pass dynamic data from Liquid to JS
- **Scope selectors properly** to avoid conflicts between sections
- **JSON-LD structured data is OK** - this is the recommended approach

### Section File Standards
- **Keep sections clean** - HTML/Liquid only, no manual wrapper elements
- **Let Shopify handle section wrappers** - Shopify automatically wraps sections with `.shopify-section`
- **Use data attributes** for dynamic values: `data-variants="{{ product.variants | json | escape }}"`
- **External script references are OK**: `{{ 'product-zoom.js' | asset_url | script_tag }}`
- **Schema settings should be comprehensive** and well-documented

### Section Spacing (CRITICAL)
- **NEVER add manual section wrapper classes** like `.section-wrapper`
- **Shopify automatically wraps ALL sections** with `<div class="shopify-section">`
- **CSS should target `.shopify-section`** for spacing between sections
- **Section content should start with `.container`** for proper layout
- **Don't fight Shopify's automatic section handling** - work with it

### Performance Requirements
- **Single CSS file** for browser caching optimization
- **Single main JS file** for faster page loads  
- **Minimize HTTP requests** - avoid multiple asset files
- **Use CSS variables** instead of inline styles for theming

### File Structure
```
assets/
‚îú‚îÄ‚îÄ style.css (ALL theme CSS)
‚îú‚îÄ‚îÄ script.js (ALL theme JavaScript)  
‚îî‚îÄ‚îÄ specialized.js (Only for complex features like zoom)

sections/
‚îî‚îÄ‚îÄ *.liquid (Clean HTML/Liquid only)
```

## üö´ What NOT to Do
- Don't delete large sections of CSS
- Don't modify navigation styles without extreme caution
- Don't use `edit_file` for anything larger than 10-20 lines
- Don't make multiple unrelated changes at once
- Don't skip testing navigation after CSS changes
- **Don't add inline CSS or JavaScript to section files**
- **Don't create multiple CSS/JS files** unless absolutely necessary
- **Don't add manual section wrapper classes** - Shopify handles this automatically
- **Don't add `<section>` wrapper elements** in section files
- **Don't fight Shopify's automatic `.shopify-section` wrapper**

## ‚úÖ Best Practices
- Read existing code before making changes
- Use semantic, descriptive class names
- Follow the established CSS variable system
- Maintain consistent indentation and formatting
- Document complex changes with comments
- **Always move CSS to main stylesheet with organized comments**
- **Always move JavaScript to main script file with modular organization**
- **Use data attributes for dynamic Liquid-to-JS communication**
- **Test functionality after moving inline code to main files**

---
*This file helps ensure the Starside Armory theme remains stable and functional during development.* 